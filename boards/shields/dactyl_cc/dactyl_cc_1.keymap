#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

//  ###########################################################
//  ###########        WORKING 2024/03/23        ###############
//  ###########################################################
// #############            LAYERS            #################

#define DEFAULT 0
#define GAME 1
#define JOS   2
#define SUS   3

// Desktop and tab navigation shortcuts		

#define DESKTOP_LT   LC(LG(LEFT))
#define DESKTOP_RT   LC(LG(RIGHT))
#define WINDOW_LT    LA(LS(TAB))
#define WINDOW_RT    LA(TAB)
#define TAB_LT       LC(LS(TAB))
#define TAB_RT       LC(TAB)

// NOT USED  &kp LG(LC(LEFT))  &kp LG(LC(RIGHT))
// Generic bindings

#define KILL_WINDOW  LA(F4)
#define MAXIMIZE     LG(UP)
#define MINIMIZE     LG(DOWN)
#define UN_MINIMIZE  LG(LC(N))

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <500>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <150>;
};

&sl {
    release-after-ms = <2000>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };

    macros {
        ZMK_MACRO(inv_qm,

        wait-ms = <10>;
        tap-ms = <10>;
        bindings =
            <&macro_press &kp LALT>,
            <&macro_tap &kp KP_N1 &kp KP_N6 &kp KP_N8>,
            <&macro_release &kp LALT>;

        )
    };

    behaviors {
        //   td_mt_ls: tap_dance_mod_tap {
        //       compatible = "zmk,behavior-tap-dance";
        //       label = "TAP_DANCE_LSHIFT";
        //       #binding-cells = <0>;
        //       tapping-term-ms = <200>;
        //       bindings = <&mt LSHIFT CAPSLOCK>, <&kp LCTRL>;
        //   };
        //   td_mt_rs: tap_dance_mod_tap {
        //       compatible = "zmk,behavior-tap-dance";
        //       label = "TAP_DANCE_RSHIFT";
        //       #binding-cells = <0>;
        //       tapping-term-ms = <200>;
        //       bindings = <&mt RSHIFT CAPSLOCK>, <&kp RCTRL>;
        //   };            
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC         &kp N1  &kp N2            &kp N3      &kp N4     &kp N5       &kp N6      &kp N7     &kp N8     &kp N9       &kp N0    &tog GAME
&kp TAB         &kp Q   &kp W             &kp E       &kp R      &kp T        &kp Y       &kp U      &kp I      &kp O        &kp P     &kp MINUS
&kp LSHIFT      &kp A   &kp S             &kp D       &kp F      &kp G        &kp H       &kp J      &kp K      &kp L        &kp SEMI  &kp SINGLE_QUOTE
&kp LCTRL       &kp Z   &kp X             &kp C       &kp V      &kp B        &kp N       &kp M      &kp COMMA  &kp DOT      &kp FSLH  &kp NON_US_BSLH
                         &kp LBKT         &kp RBKT    &mo SUS    &kp LALT     &kp RALT    &mo JOS    &kp GRAVE   &kp EQUAL
                         &kp LGUI         &kp BSPC    &kp RET    &kp SPACE    &kp SPACE   &kp RET    &kp DEL    &kp LGUI
            >;
        };
        
        GAME {
            bindings = <
&kp ESC      &kp N1          &kp N2    &kp N3      &kp N4      &kp N5     &kp N6       &kp N7      &kp N8     &kp N9       &kp N0     &tog GAME
&trans       &kp TAB         &kp Q     &kp W       &kp E       &kp R      &kp T        &kp Y       &kp I      &kp O        &kp P      &kp MINUS
&trans       &kp LSHIFT      &kp A     &kp S       &kp D       &kp F      &kp H        &kp J       &kp K      &kp L        &kp SEMI   &kp SINGLE_QUOTE
&trans       &kp LCTRL       &kp Z     &kp X       &kp C       &kp B      &kp N        &kp M       &kp COMMA  &kp DOT      &kp FSLH  &kp NON_US_BSLH
                             &kp LBKT  &kp RBKT    &mo SUS     &kp LALT    &kp RALT    &mo JOS    &kp GRAVE  &kp EQUAL
                             &kp G     &kp BSPC    &kp RET     &kp SPACE   &kp SPACE   &kp RET    &kp DEL    &kp LGUI
            >;
        };

        JOS {
            bindings = <
&kp TILDE  &kp LS(N1)   &kp LS(N2)       &kp LS(N3)       &kp LS(N4)    &kp LS(N5)       &kp LS(N6)  &kp LS(N7) &kp LS(N8)     &kp LS(N9)   &kp LS(N0) &kp DEL
&kp GRAVE  &bt BT_SEL 1 &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4  &kp LBRC         &kp RBRC    &kp N7     &kp N8         &kp N9       &trans      &kp PLUS
&trans     &kp HOME     &kp PG_UP        &kp PG_DN        &kp END       &kp LPAR         &kp RPAR    &kp N4     &kp N5         &kp N6       &kp MINUS   &kp PIPE
&trans     &trans       &trans           &trans           &trans        &trans           &trans      &kp N1     &kp N2         &kp N3       &kp EQUAL   &kp UNDER
                        &trans           &kp PSCRN        &trans        &trans           &trans      &kp N0     &trans         &trans
                        &trans           &trans           &trans        &bt BT_CLR       &trans      &trans     &trans         &trans
            >;
        };

        SUS {
            bindings = <
&kp F12     &kp F1           &kp F2           &kp F3           &kp F4           &kp F5             &kp F6     &kp F7        &kp F8     &kp F9         &kp F10   &kp F11
&trans      &trans           &trans           &trans           &trans           &kp LBRC           &kp RBRC   &trans        &kp LNLCK  &kp INS        &kp SLCK  &kp C_VOL_UP
&trans      &kp LEFT         &kp UP           &kp DOWN         &kp RIGHT        &kp LPAR           &kp RPAR   &kp C_PREV    &kp C_PLAY &kp C_NEXT     &trans    &kp C_VOL_DN
&trans      &trans           &trans           &trans           &trans           &trans             &trans     &trans        &trans     &trans         &trans    &kp C_MUTE
                             &trans           &trans           &trans           &trans             &kp EQUAL  &trans        &trans     &trans
                             &tog DEFAULT     &trans           &tog GAME        &trans             &trans     &trans        &trans     &trans
            >;
        };
    };
};
